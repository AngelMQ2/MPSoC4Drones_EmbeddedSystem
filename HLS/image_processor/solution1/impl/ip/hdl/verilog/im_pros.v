// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="im_pros_im_pros,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.928000,HLS_SYN_LAT=59225,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=362,HLS_SYN_LUT=552,HLS_VERSION=2020_2}" *)

module im_pros (
        ap_clk,
        ap_rst_n,
        s_axi_AXI_CPU_AWVALID,
        s_axi_AXI_CPU_AWREADY,
        s_axi_AXI_CPU_AWADDR,
        s_axi_AXI_CPU_WVALID,
        s_axi_AXI_CPU_WREADY,
        s_axi_AXI_CPU_WDATA,
        s_axi_AXI_CPU_WSTRB,
        s_axi_AXI_CPU_ARVALID,
        s_axi_AXI_CPU_ARREADY,
        s_axi_AXI_CPU_ARADDR,
        s_axi_AXI_CPU_RVALID,
        s_axi_AXI_CPU_RREADY,
        s_axi_AXI_CPU_RDATA,
        s_axi_AXI_CPU_RRESP,
        s_axi_AXI_CPU_BVALID,
        s_axi_AXI_CPU_BREADY,
        s_axi_AXI_CPU_BRESP,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;
parameter    C_S_AXI_AXI_CPU_DATA_WIDTH = 32;
parameter    C_S_AXI_AXI_CPU_ADDR_WIDTH = 16;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;

parameter C_S_AXI_AXI_CPU_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXI_CPU_AWVALID;
output   s_axi_AXI_CPU_AWREADY;
input  [C_S_AXI_AXI_CPU_ADDR_WIDTH - 1:0] s_axi_AXI_CPU_AWADDR;
input   s_axi_AXI_CPU_WVALID;
output   s_axi_AXI_CPU_WREADY;
input  [C_S_AXI_AXI_CPU_DATA_WIDTH - 1:0] s_axi_AXI_CPU_WDATA;
input  [C_S_AXI_AXI_CPU_WSTRB_WIDTH - 1:0] s_axi_AXI_CPU_WSTRB;
input   s_axi_AXI_CPU_ARVALID;
output   s_axi_AXI_CPU_ARREADY;
input  [C_S_AXI_AXI_CPU_ADDR_WIDTH - 1:0] s_axi_AXI_CPU_ARADDR;
output   s_axi_AXI_CPU_RVALID;
input   s_axi_AXI_CPU_RREADY;
output  [C_S_AXI_AXI_CPU_DATA_WIDTH - 1:0] s_axi_AXI_CPU_RDATA;
output  [1:0] s_axi_AXI_CPU_RRESP;
output   s_axi_AXI_CPU_BVALID;
input   s_axi_AXI_CPU_BREADY;
output  [1:0] s_axi_AXI_CPU_BRESP;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [13:0] imageIn_address0;
reg    imageIn_ce0;
wire   [7:0] imageIn_q0;
wire   [13:0] imageOut_address0;
reg    imageOut_ce0;
reg    imageOut_we0;
wire   [7:0] imageOut_d0;
reg   [13:0] indvar_flatten_reg_144;
reg   [6:0] i_reg_155;
reg   [6:0] j_reg_166;
reg   [7:0] reg_177;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln17_reg_407;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [13:0] add_ln17_fu_181_p2;
reg   [13:0] add_ln17_reg_402;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln17_fu_187_p2;
reg   [0:0] icmp_ln17_reg_407_pp0_iter1_reg;
wire   [6:0] select_ln17_fu_199_p3;
reg   [6:0] select_ln17_reg_411;
wire   [6:0] select_ln17_1_fu_213_p3;
reg   [6:0] select_ln17_1_reg_420;
wire   [6:0] select_ln17_2_fu_227_p3;
reg   [6:0] select_ln17_2_reg_428;
wire   [63:0] zext_ln22_fu_243_p1;
reg   [63:0] zext_ln22_reg_433;
reg   [63:0] zext_ln22_reg_433_pp0_iter1_reg;
wire   [8:0] ret_4_fu_302_p2;
reg   [8:0] ret_4_reg_448;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [9:0] ret_6_fu_353_p2;
reg   [9:0] ret_6_reg_463;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [6:0] add_ln22_fu_359_p2;
reg   [6:0] add_ln22_reg_468;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage3_subdone;
reg   [13:0] ap_phi_mux_indvar_flatten_phi_fu_148_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] ap_phi_mux_i_phi_fu_159_p4;
reg   [6:0] ap_phi_mux_j_phi_fu_170_p4;
wire   [63:0] zext_ln215_1_fu_289_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln215_5_fu_314_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln215_6_fu_331_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln215_7_fu_371_p1;
wire    ap_block_pp0_stage4;
wire   [0:0] icmp_ln18_fu_193_p2;
wire   [6:0] indvars_iv_next763_fu_207_p2;
wire   [6:0] indvars_iv_next76_mid1_fu_221_p2;
wire   [13:0] tmp_5_fu_235_p3;
wire   [7:0] or_ln_fu_255_p3;
wire  signed [13:0] sext_ln215_fu_262_p1;
wire   [13:0] shl_ln215_mid2_fu_248_p3;
wire   [13:0] add_ln215_fu_266_p2;
wire   [6:0] lshr_ln_fu_272_p4;
wire   [13:0] tmp_1_fu_282_p3;
wire   [8:0] zext_ln215_2_fu_298_p1;
wire   [8:0] zext_ln215_fu_294_p1;
wire   [13:0] tmp_fu_308_p3;
wire   [6:0] add_ln215_1_fu_319_p2;
wire   [13:0] tmp_6_fu_324_p3;
wire   [9:0] zext_ln215_3_fu_336_p1;
wire   [9:0] zext_ln215_4_fu_339_p1;
wire   [9:0] ret_5_fu_343_p2;
wire   [9:0] zext_ln1346_fu_349_p1;
wire   [13:0] tmp_7_fu_364_p3;
wire   [22:0] grp_fu_393_p3;
wire   [9:0] grp_fu_393_p0;
wire   [7:0] grp_fu_393_p1;
wire   [12:0] grp_fu_393_p2;
wire    ap_CS_fsm_state11;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_393_p00;
wire   [10:0] grp_fu_393_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

im_pros_AXI_CPU_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXI_CPU_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXI_CPU_DATA_WIDTH ))
AXI_CPU_s_axi_U(
    .AWVALID(s_axi_AXI_CPU_AWVALID),
    .AWREADY(s_axi_AXI_CPU_AWREADY),
    .AWADDR(s_axi_AXI_CPU_AWADDR),
    .WVALID(s_axi_AXI_CPU_WVALID),
    .WREADY(s_axi_AXI_CPU_WREADY),
    .WDATA(s_axi_AXI_CPU_WDATA),
    .WSTRB(s_axi_AXI_CPU_WSTRB),
    .ARVALID(s_axi_AXI_CPU_ARVALID),
    .ARREADY(s_axi_AXI_CPU_ARREADY),
    .ARADDR(s_axi_AXI_CPU_ARADDR),
    .RVALID(s_axi_AXI_CPU_RVALID),
    .RREADY(s_axi_AXI_CPU_RREADY),
    .RDATA(s_axi_AXI_CPU_RDATA),
    .RRESP(s_axi_AXI_CPU_RRESP),
    .BVALID(s_axi_AXI_CPU_BVALID),
    .BREADY(s_axi_AXI_CPU_BREADY),
    .BRESP(s_axi_AXI_CPU_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .imageIn_address0(imageIn_address0),
    .imageIn_ce0(imageIn_ce0),
    .imageIn_q0(imageIn_q0),
    .imageOut_address0(imageOut_address0),
    .imageOut_ce0(imageOut_ce0),
    .imageOut_we0(imageOut_we0),
    .imageOut_d0(imageOut_d0)
);

im_pros_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

im_pros_am_addmul_10ns_8ns_13ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 23 ))
am_addmul_10ns_8ns_13ns_23_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_393_p0),
    .din1(grp_fu_393_p1),
    .din2(grp_fu_393_p2),
    .ce(1'b1),
    .dout(grp_fu_393_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_155 <= select_ln17_1_reg_420;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_155 <= 7'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_144 <= add_ln17_reg_402;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_144 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_166 <= add_ln22_reg_468;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_166 <= 7'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln17_reg_402 <= add_ln17_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln22_reg_468 <= add_ln22_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln17_reg_407 <= icmp_ln17_fu_187_p2;
        icmp_ln17_reg_407_pp0_iter1_reg <= icmp_ln17_reg_407;
        zext_ln22_reg_433_pp0_iter1_reg[13 : 0] <= zext_ln22_reg_433[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_177 <= imageIn_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ret_4_reg_448 <= ret_4_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ret_6_reg_463 <= ret_6_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_fu_187_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln17_1_reg_420 <= select_ln17_1_fu_213_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_fu_187_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln17_2_reg_428 <= select_ln17_2_fu_227_p3;
        select_ln17_reg_411 <= select_ln17_fu_199_p3;
        zext_ln22_reg_433[13 : 0] <= zext_ln22_fu_243_p1[13 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln17_fu_187_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_159_p4 = select_ln17_1_reg_420;
    end else begin
        ap_phi_mux_i_phi_fu_159_p4 = i_reg_155;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_148_p4 = add_ln17_reg_402;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_148_p4 = indvar_flatten_reg_144;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln17_reg_407 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_170_p4 = add_ln22_reg_468;
    end else begin
        ap_phi_mux_j_phi_fu_170_p4 = j_reg_166;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            imageIn_address0 = zext_ln215_7_fu_371_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            imageIn_address0 = zext_ln215_6_fu_331_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            imageIn_address0 = zext_ln215_5_fu_314_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            imageIn_address0 = zext_ln215_1_fu_289_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            imageIn_address0 = zext_ln22_fu_243_p1;
        end else begin
            imageIn_address0 = 'bx;
        end
    end else begin
        imageIn_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        imageIn_ce0 = 1'b1;
    end else begin
        imageIn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        imageOut_ce0 = 1'b1;
    end else begin
        imageOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln17_reg_407_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        imageOut_we0 = 1'b1;
    end else begin
        imageOut_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln17_fu_187_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln17_fu_187_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_181_p2 = (ap_phi_mux_indvar_flatten_phi_fu_148_p4 + 14'd1);

assign add_ln215_1_fu_319_p2 = ($signed(select_ln17_reg_411) + $signed(7'd127));

assign add_ln215_fu_266_p2 = ($signed(sext_ln215_fu_262_p1) + $signed(shl_ln215_mid2_fu_248_p3));

assign add_ln22_fu_359_p2 = (select_ln17_reg_411 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_393_p0 = grp_fu_393_p00;

assign grp_fu_393_p00 = ret_6_reg_463;

assign grp_fu_393_p1 = grp_fu_393_p10;

assign grp_fu_393_p10 = imageIn_q0;

assign grp_fu_393_p2 = 23'd3277;

assign icmp_ln17_fu_187_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_148_p4 == 14'd11844) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_193_p2 = ((ap_phi_mux_j_phi_fu_170_p4 == 7'd127) ? 1'b1 : 1'b0);

assign imageOut_address0 = zext_ln22_reg_433_pp0_iter1_reg;

assign imageOut_d0 = {{grp_fu_393_p3[21:14]}};

assign indvars_iv_next763_fu_207_p2 = (ap_phi_mux_i_phi_fu_159_p4 + 7'd1);

assign indvars_iv_next76_mid1_fu_221_p2 = (ap_phi_mux_i_phi_fu_159_p4 + 7'd2);

assign lshr_ln_fu_272_p4 = {{add_ln215_fu_266_p2[13:7]}};

assign or_ln_fu_255_p3 = {{1'd1}, {select_ln17_reg_411}};

assign ret_4_fu_302_p2 = (zext_ln215_2_fu_298_p1 + zext_ln215_fu_294_p1);

assign ret_5_fu_343_p2 = (zext_ln215_3_fu_336_p1 + zext_ln215_4_fu_339_p1);

assign ret_6_fu_353_p2 = (ret_5_fu_343_p2 + zext_ln1346_fu_349_p1);

assign select_ln17_1_fu_213_p3 = ((icmp_ln18_fu_193_p2[0:0] == 1'b1) ? indvars_iv_next763_fu_207_p2 : ap_phi_mux_i_phi_fu_159_p4);

assign select_ln17_2_fu_227_p3 = ((icmp_ln18_fu_193_p2[0:0] == 1'b1) ? indvars_iv_next76_mid1_fu_221_p2 : indvars_iv_next763_fu_207_p2);

assign select_ln17_fu_199_p3 = ((icmp_ln18_fu_193_p2[0:0] == 1'b1) ? 7'd1 : ap_phi_mux_j_phi_fu_170_p4);

assign sext_ln215_fu_262_p1 = $signed(or_ln_fu_255_p3);

assign shl_ln215_mid2_fu_248_p3 = {{select_ln17_1_reg_420}, {7'd0}};

assign tmp_1_fu_282_p3 = {{lshr_ln_fu_272_p4}, {select_ln17_reg_411}};

assign tmp_5_fu_235_p3 = {{select_ln17_1_fu_213_p3}, {select_ln17_fu_199_p3}};

assign tmp_6_fu_324_p3 = {{select_ln17_1_reg_420}, {add_ln215_1_fu_319_p2}};

assign tmp_7_fu_364_p3 = {{select_ln17_1_reg_420}, {add_ln22_fu_359_p2}};

assign tmp_fu_308_p3 = {{select_ln17_2_reg_428}, {select_ln17_reg_411}};

assign zext_ln1346_fu_349_p1 = imageIn_q0;

assign zext_ln215_1_fu_289_p1 = tmp_1_fu_282_p3;

assign zext_ln215_2_fu_298_p1 = imageIn_q0;

assign zext_ln215_3_fu_336_p1 = ret_4_reg_448;

assign zext_ln215_4_fu_339_p1 = reg_177;

assign zext_ln215_5_fu_314_p1 = tmp_fu_308_p3;

assign zext_ln215_6_fu_331_p1 = tmp_6_fu_324_p3;

assign zext_ln215_7_fu_371_p1 = tmp_7_fu_364_p3;

assign zext_ln215_fu_294_p1 = reg_177;

assign zext_ln22_fu_243_p1 = tmp_5_fu_235_p3;

always @ (posedge ap_clk) begin
    zext_ln22_reg_433[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln22_reg_433_pp0_iter1_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //im_pros
