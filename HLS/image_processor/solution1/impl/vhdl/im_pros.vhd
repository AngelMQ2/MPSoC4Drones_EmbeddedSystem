-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity im_pros is
generic (
    C_S_AXI_AXI_CPU_ADDR_WIDTH : INTEGER := 16;
    C_S_AXI_AXI_CPU_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXI_CPU_AWVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_AWREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_CPU_WVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_WREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH-1 downto 0);
    s_axi_AXI_CPU_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH/8-1 downto 0);
    s_axi_AXI_CPU_ARVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_ARREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_CPU_RVALID : OUT STD_LOGIC;
    s_axi_AXI_CPU_RREADY : IN STD_LOGIC;
    s_axi_AXI_CPU_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH-1 downto 0);
    s_axi_AXI_CPU_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXI_CPU_BVALID : OUT STD_LOGIC;
    s_axi_AXI_CPU_BREADY : IN STD_LOGIC;
    s_axi_AXI_CPU_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of im_pros is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "im_pros_im_pros,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.928000,HLS_SYN_LAT=59225,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=362,HLS_SYN_LUT=552,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2E44 : STD_LOGIC_VECTOR (13 downto 0) := "10111001000100";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv23_CCD : STD_LOGIC_VECTOR (22 downto 0) := "00000000000110011001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal imageIn_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal imageIn_ce0 : STD_LOGIC;
    signal imageIn_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal imageOut_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal imageOut_ce0 : STD_LOGIC;
    signal imageOut_we0 : STD_LOGIC;
    signal imageOut_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_reg_144 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_155 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_166 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_177 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln17_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln17_fu_181_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln17_reg_402 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln17_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_407_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln17_fu_199_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_reg_411 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_1_fu_213_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_1_reg_420 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_2_fu_227_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln17_2_reg_428 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln22_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_433 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_433_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_4_fu_302_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_4_reg_448 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ret_6_fu_353_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_6_reg_463 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal add_ln22_fu_359_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_reg_468 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_148_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_159_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_j_phi_fu_170_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_1_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln215_5_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln215_6_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln215_7_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal icmp_ln18_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next763_fu_207_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvars_iv_next76_mid1_fu_221_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_235_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln_fu_255_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln215_fu_262_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln215_mid2_fu_248_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln215_fu_266_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_272_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_282_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln215_2_fu_298_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_fu_294_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_308_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln215_1_fu_319_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_324_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln215_3_fu_336_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_4_fu_339_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_5_fu_343_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1346_fu_349_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_364_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_393_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_393_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_393_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_393_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_393_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component im_pros_am_addmul_10ns_8ns_13ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component im_pros_AXI_CPU_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        imageIn_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        imageIn_ce0 : IN STD_LOGIC;
        imageIn_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        imageOut_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        imageOut_ce0 : IN STD_LOGIC;
        imageOut_we0 : IN STD_LOGIC;
        imageOut_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component im_pros_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    AXI_CPU_s_axi_U : component im_pros_AXI_CPU_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_CPU_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_CPU_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXI_CPU_AWVALID,
        AWREADY => s_axi_AXI_CPU_AWREADY,
        AWADDR => s_axi_AXI_CPU_AWADDR,
        WVALID => s_axi_AXI_CPU_WVALID,
        WREADY => s_axi_AXI_CPU_WREADY,
        WDATA => s_axi_AXI_CPU_WDATA,
        WSTRB => s_axi_AXI_CPU_WSTRB,
        ARVALID => s_axi_AXI_CPU_ARVALID,
        ARREADY => s_axi_AXI_CPU_ARREADY,
        ARADDR => s_axi_AXI_CPU_ARADDR,
        RVALID => s_axi_AXI_CPU_RVALID,
        RREADY => s_axi_AXI_CPU_RREADY,
        RDATA => s_axi_AXI_CPU_RDATA,
        RRESP => s_axi_AXI_CPU_RRESP,
        BVALID => s_axi_AXI_CPU_BVALID,
        BREADY => s_axi_AXI_CPU_BREADY,
        BRESP => s_axi_AXI_CPU_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        imageIn_address0 => imageIn_address0,
        imageIn_ce0 => imageIn_ce0,
        imageIn_q0 => imageIn_q0,
        imageOut_address0 => imageOut_address0,
        imageOut_ce0 => imageOut_ce0,
        imageOut_we0 => imageOut_we0,
        imageOut_d0 => imageOut_d0);

    control_s_axi_U : component im_pros_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    am_addmul_10ns_8ns_13ns_23_4_1_U1 : component im_pros_am_addmul_10ns_8ns_13ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 13,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_393_p0,
        din1 => grp_fu_393_p1,
        din2 => grp_fu_393_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_393_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_155 <= select_ln17_1_reg_420;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_155 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_144 <= add_ln17_reg_402;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_144 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    j_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_166 <= add_ln22_reg_468;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_166 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln17_reg_402 <= add_ln17_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln22_reg_468 <= add_ln22_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln17_reg_407 <= icmp_ln17_fu_187_p2;
                icmp_ln17_reg_407_pp0_iter1_reg <= icmp_ln17_reg_407;
                    zext_ln22_reg_433_pp0_iter1_reg(13 downto 0) <= zext_ln22_reg_433(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_177 <= imageIn_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ret_4_reg_448 <= ret_4_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                ret_6_reg_463 <= ret_6_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_187_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln17_1_reg_420 <= select_ln17_1_fu_213_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_fu_187_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln17_2_reg_428 <= select_ln17_2_fu_227_p3;
                select_ln17_reg_411 <= select_ln17_fu_199_p3;
                    zext_ln22_reg_433(13 downto 0) <= zext_ln22_fu_243_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln22_reg_433(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln22_reg_433_pp0_iter1_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, icmp_ln17_fu_187_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln17_fu_187_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln17_fu_187_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln17_fu_181_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_148_p4) + unsigned(ap_const_lv14_1));
    add_ln215_1_fu_319_p2 <= std_logic_vector(unsigned(select_ln17_reg_411) + unsigned(ap_const_lv7_7F));
    add_ln215_fu_266_p2 <= std_logic_vector(signed(sext_ln215_fu_262_p1) + signed(shl_ln215_mid2_fu_248_p3));
    add_ln22_fu_359_p2 <= std_logic_vector(unsigned(select_ln17_reg_411) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln17_fu_187_p2)
    begin
        if ((icmp_ln17_fu_187_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_159_p4_assign_proc : process(i_reg_155, icmp_ln17_reg_407, ap_CS_fsm_pp0_stage0, select_ln17_1_reg_420, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_159_p4 <= select_ln17_1_reg_420;
        else 
            ap_phi_mux_i_phi_fu_159_p4 <= i_reg_155;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_148_p4_assign_proc : process(indvar_flatten_reg_144, icmp_ln17_reg_407, add_ln17_reg_402, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_148_p4 <= add_ln17_reg_402;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_148_p4 <= indvar_flatten_reg_144;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_170_p4_assign_proc : process(j_reg_166, icmp_ln17_reg_407, ap_CS_fsm_pp0_stage0, add_ln22_reg_468, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_407 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_170_p4 <= add_ln22_reg_468;
        else 
            ap_phi_mux_j_phi_fu_170_p4 <= j_reg_166;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_393_p0 <= grp_fu_393_p00(10 - 1 downto 0);
    grp_fu_393_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_6_reg_463),11));
    grp_fu_393_p1 <= grp_fu_393_p10(8 - 1 downto 0);
    grp_fu_393_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageIn_q0),11));
    grp_fu_393_p2 <= ap_const_lv23_CCD(13 - 1 downto 0);
    icmp_ln17_fu_187_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_148_p4 = ap_const_lv14_2E44) else "0";
    icmp_ln18_fu_193_p2 <= "1" when (ap_phi_mux_j_phi_fu_170_p4 = ap_const_lv7_7F) else "0";

    imageIn_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, zext_ln22_fu_243_p1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, zext_ln215_1_fu_289_p1, ap_block_pp0_stage1, zext_ln215_5_fu_314_p1, ap_block_pp0_stage2, zext_ln215_6_fu_331_p1, ap_block_pp0_stage3, zext_ln215_7_fu_371_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                imageIn_address0 <= zext_ln215_7_fu_371_p1(14 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                imageIn_address0 <= zext_ln215_6_fu_331_p1(14 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                imageIn_address0 <= zext_ln215_5_fu_314_p1(14 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                imageIn_address0 <= zext_ln215_1_fu_289_p1(14 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                imageIn_address0 <= zext_ln22_fu_243_p1(14 - 1 downto 0);
            else 
                imageIn_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            imageIn_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    imageIn_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            imageIn_ce0 <= ap_const_logic_1;
        else 
            imageIn_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imageOut_address0 <= zext_ln22_reg_433_pp0_iter1_reg(14 - 1 downto 0);

    imageOut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            imageOut_ce0 <= ap_const_logic_1;
        else 
            imageOut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imageOut_d0 <= grp_fu_393_p3(21 downto 14);

    imageOut_we0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, icmp_ln17_reg_407_pp0_iter1_reg, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln17_reg_407_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            imageOut_we0 <= ap_const_logic_1;
        else 
            imageOut_we0 <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv_next763_fu_207_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_159_p4) + unsigned(ap_const_lv7_1));
    indvars_iv_next76_mid1_fu_221_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_159_p4) + unsigned(ap_const_lv7_2));
    lshr_ln_fu_272_p4 <= add_ln215_fu_266_p2(13 downto 7);
    or_ln_fu_255_p3 <= (ap_const_lv1_1 & select_ln17_reg_411);
    ret_4_fu_302_p2 <= std_logic_vector(unsigned(zext_ln215_2_fu_298_p1) + unsigned(zext_ln215_fu_294_p1));
    ret_5_fu_343_p2 <= std_logic_vector(unsigned(zext_ln215_3_fu_336_p1) + unsigned(zext_ln215_4_fu_339_p1));
    ret_6_fu_353_p2 <= std_logic_vector(unsigned(ret_5_fu_343_p2) + unsigned(zext_ln1346_fu_349_p1));
    select_ln17_1_fu_213_p3 <= 
        indvars_iv_next763_fu_207_p2 when (icmp_ln18_fu_193_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_159_p4;
    select_ln17_2_fu_227_p3 <= 
        indvars_iv_next76_mid1_fu_221_p2 when (icmp_ln18_fu_193_p2(0) = '1') else 
        indvars_iv_next763_fu_207_p2;
    select_ln17_fu_199_p3 <= 
        ap_const_lv7_1 when (icmp_ln18_fu_193_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_170_p4;
        sext_ln215_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_fu_255_p3),14));

    shl_ln215_mid2_fu_248_p3 <= (select_ln17_1_reg_420 & ap_const_lv7_0);
    tmp_1_fu_282_p3 <= (lshr_ln_fu_272_p4 & select_ln17_reg_411);
    tmp_5_fu_235_p3 <= (select_ln17_1_fu_213_p3 & select_ln17_fu_199_p3);
    tmp_6_fu_324_p3 <= (select_ln17_1_reg_420 & add_ln215_1_fu_319_p2);
    tmp_7_fu_364_p3 <= (select_ln17_1_reg_420 & add_ln22_fu_359_p2);
    tmp_fu_308_p3 <= (select_ln17_2_reg_428 & select_ln17_reg_411);
    zext_ln1346_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageIn_q0),10));
    zext_ln215_1_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_282_p3),64));
    zext_ln215_2_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageIn_q0),9));
    zext_ln215_3_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_4_reg_448),10));
    zext_ln215_4_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_177),10));
    zext_ln215_5_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_308_p3),64));
    zext_ln215_6_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_324_p3),64));
    zext_ln215_7_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_364_p3),64));
    zext_ln215_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_177),9));
    zext_ln22_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_235_p3),64));
end behav;
